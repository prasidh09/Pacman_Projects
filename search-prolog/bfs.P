/*7 7*/
goal(c1_1).
s(c1_1, c2_1).
s(c1_3, c2_3).
s(c1_3, c1_4).
s(c1_4, c1_3).
s(c1_4, c1_5).
s(c1_5, c2_5).
s(c1_5, c1_4).
s(c2_1, c1_1).
s(c2_1, c2_2).
s(c2_2, c3_2).
s(c2_2, c2_1).
s(c2_2, c2_3).
s(c2_3, c1_3).
s(c2_3, c2_2).
s(c2_5, c1_5).
s(c2_5, c3_5).
s(c3_2, c2_2).
s(c3_2, c4_2).
s(c3_5, c2_5).
s(c3_5, c4_5).
s(c4_2, c3_2).
s(c4_2, c4_3).
s(c4_3, c5_3).
s(c4_3, c4_2).
s(c4_5, c3_5).
s(c4_5, c5_5).
s(c5_3, c4_3).
s(c5_3, c5_4).
s(c5_4, c5_3).
s(c5_4, c5_5).
s(c5_5, c4_5).
s(c5_5, c5_4).
start(c5_5).

member(X,[X|R]).
member(X,[Y|R]) :- member(X,R).

add(Q,X,[X|Q]).
add(Q,[],Q).
add([],X,X).

bfs(S,Path) :-add([],S,Q2), bfs1(Q2,Path).

bfs1(Q,[G,S|Tail]) :- add(_,[S|Tail],Q), s(S,G), goal(G).

bfs1(Q1,Solution) :- add(Q2,[S|Tail],Q1), findall([Succ,S|Tail], 
(s(S,Succ), not member(Succ,Tail)), NewPaths), conc(NewPaths,Q2,Q3), bfs1(Q3,Solution).

conc([],L,L).
conc([X|L1],L2,[X|L3]) :- conc(L1,L2,L3).
